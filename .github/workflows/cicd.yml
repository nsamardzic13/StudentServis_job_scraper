name: AWS Service CI/CD

on:
  push:
    branches: [ "main" ]  # Trigger deployment on push to main
  pull_request:
    branches: [ "main" ]  # Trigger CDK diff on PR

env:
  AWS_REGION: "eu-central-1"
  TF_ACTIONS_WORKING_DIR: "infrastructure"
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  SMTP_USER: ${{ secrets.SMTP_USER }}
  SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
  BASE64: ${{ secrets.BASE64 }}

permissions:
  contents: read
  pull-requests: write  # Needed to add PR comments

jobs:
  push_to_registry:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps:
      - name: Check out the code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.DOCKER_USERNAME }}/ss-jobs:latest
          build-args: |
            SMTP_USER=${{ env.SMTP_USER }}
            SMTP_PASSWORD=${{ env.SMTP_PASSWORD }}
          
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate service_account.json
        run: |
          echo "${BASE64}" | base64 --decode | jq > service_account.json
        env:
          BASE64: ${{ secrets.BASE64 }}

      - name: Set up terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        working-directory: ${{ env.TF_ACTIONS_WORKING_DIR }}
        continue-on-error: true
      
      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ env.TF_ACTIONS_WORKING_DIR }}
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ${{ env.TF_ACTIONS_WORKING_DIR }}
      
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        working-directory: ${{ env.TF_ACTIONS_WORKING_DIR }}
        continue-on-error: true
      
      - uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>
      
            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`
      
            </details>
      
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
      
            <details><summary>Show Plan</summary>
      
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
      
            </details>
      
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.TF_ACTIONS_WORKING_DIR }}\`, Workflow: \`${{ github.workflow }}\`*`;
      
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform apply
        id: apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
        working-directory: ${{ env.TF_ACTIONS_WORKING_DIR }}